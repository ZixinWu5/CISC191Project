import javax.swing.*;
import java.awt.*;

//main game class that manages the Treasure Hunt game state and UI, it manages the game board, game state, and user interface components
public class TreasureGame extends JFrame
{
    //size of the game board (BOARD_SIZE x BOARD_SIZE) 
    private static final int BOARD_SIZE = 6;

    // total number of treasures to place on the board 
    private static final int TOTAL_TREASURES = 20;

    //total number of tries allowed
    private static final int TOTAL_TRIES = 30;

    //UI components for displaying game status 
    private JLabel treasuresLeftLabel;
    private JLabel treasuresFoundLabel;
    private JLabel triesLeftLabel;
    private JLabel lastMoveLabel;

    //game state variables 
    private int treasuresLeft;
    private int treasuresFound;
    private int triesLeft;

    // 2D array of all buttons on the game board 
    private EmptyButton[][] buttons;
    // a constructor constructs a new TreasureGame instance.
    public TreasureGame()
    {
        super("Treasure Hunt");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initializeGame();
        setupUI();
        pack();
        setLocationRelativeTo(null);
    }

    //initializes game state variables to their starting values.
    private void initializeGame()
    {
        treasuresLeft = TOTAL_TREASURES;
        treasuresFound = 0;
        triesLeft = TOTAL_TRIES;
        buttons = new EmptyButton[BOARD_SIZE][BOARD_SIZE];
    }

    //sets up the game's user interface components.
    private void setupUI()
    {
        setLayout(new BorderLayout(10, 10));
        // title
        JLabel titleLabel = new JLabel("Treasure Hunt", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Serif", Font.BOLD, 24));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));
        add(titleLabel, BorderLayout.NORTH);

        // game board
        JPanel boardPanel = new JPanel(new GridLayout(BOARD_SIZE, BOARD_SIZE, 5, 5));
        boardPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        createBoard(boardPanel);
        add(boardPanel, BorderLayout.CENTER);

        // status panel
        JPanel statusPanel = new JPanel(new GridLayout(4, 1, 5, 5));
        statusPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        //the label about how many tresures left and found, with how many chance still could triy and when is the last move
        treasuresLeftLabel = new JLabel("Treasures left: " + treasuresLeft);
        treasuresFoundLabel = new JLabel("Treasures found: " + treasuresFound);
        triesLeftLabel = new JLabel("Tries left: " + triesLeft);
        lastMoveLabel = new JLabel("Last move: ");

        //the displacement of where is the labels
        statusPanel.add(treasuresLeftLabel);
        statusPanel.add(treasuresFoundLabel);
        statusPanel.add(triesLeftLabel);
        statusPanel.add(lastMoveLabel);

        add(statusPanel, BorderLayout.EAST);
    }

    // creates and initializes the game board with randomly placed treasures.
    private void createBoard(JPanel boardPanel)
    {
        // create array of buttons 
        EmptyButton[] allButtons = new EmptyButton[BOARD_SIZE * BOARD_SIZE];

        // place treasure buttons randomly
        int treasuresPlaced = 0;//initial 0
        while (treasuresPlaced < TOTAL_TREASURES)
        {
            int location = (int)(Math.random() * (BOARD_SIZE * BOARD_SIZE));//ensuring randomness of treasure placement on the game board in TreasureGame
            if (allButtons[location] == null)
            {
                TreasureButton treasureButton = new TreasureButton();// represents a location on the board where a treasure is hidden.
                treasureButton.setupClickBehavior(this);//when clicked, the button will reveal itself as a treasure, call the game's methods to update the game state
                allButtons[location] = treasureButton;//determined by generating a random index, ensuring that the treasure button is placed at a random position on the game board
                treasuresPlaced++;// keep track of how many treasure buttons have been placed on the board
            }
        }

        // Fill remaining spots with empty buttons
        for (int i = 0; i < allButtons.length; i++)
        {
            if (allButtons[i] == null) //check if the current index in the allButtons array is unoccupied
            {
                EmptyButton emptyButton = new EmptyButton();//create a new EmptyButton instance for non-treasure spaces
                emptyButton.addActionListener(e -> //add click behavior to the EmptyButton
                {
                    if (!isGameOver()) //if the game is still running
                    {
                        emptyButton.setEnabled(false);//prevent further clicks
                        emptyButton.setBackground(Color.PINK);//appearance color
                        emptyButton.setText("O");//no reasure
                        reduceNumberOfTries();//attempt reduce
                        foundNothing();//
                    }
                });
                allButtons[i] = emptyButton;//assign the constructed empty button to this position in the array
            }
        }

        // Place buttons on board
        int buttonIndex = 0;
        for (int row = 0; row < BOARD_SIZE; row++) // iterate over each row of a array or grid
        {
            for (int col = 0; col < BOARD_SIZE; col++) //iterate over each column for the current row
            {
                EmptyButton button = allButtons[buttonIndex++];//retrieve the next button from the allButtons array
                buttons[row][col] = button;//assign this button to its respective position in the buttons array
                boardPanel.add(button);//dd the button to the boardPanel, which displays the game board
            }
        }
    }

    //can reduces the number of remaining tries and checks for game over.     
    public void reduceNumberOfTries()
    {
        triesLeft--;//decrement the number of tries left by 1 to indicate an attempt was made
        triesLeftLabel.setText("Tries left: " + triesLeft);//update the label on the UI to reflect the new number of tries left
        if (isGameOver()) //check if the game is over, either through depletion of tries or finding all treasures
        {
            endGame();//the end game routine to handle the game over state
        }
    }

    //can updates game state when a treasure is found.
    public void foundTreasure()
    {
        treasuresLeft--;//decrements the count of treasures left by 1, indicating that a treasure has been found
        treasuresFound++;//increments the count of treasures found by 1, updating the player's progress
        treasuresLeftLabel.setText("Treasures left: " + treasuresLeft);//updates the UI label to display the current number of treasures still left to be found
        treasuresFoundLabel.setText("Treasures found: " + treasuresFound);//updates the UI label to show the total number of treasures found so far
        lastMoveLabel.setText("Last move: Treasure!");//updates the UI label to indicate that the last move resulted in finding a treasure
    }

    //can updates game state when no treasure is found.
    public void foundNothing()
    {
        lastMoveLabel.setText("Last move: Miss!");
    }

    //can check if the game is over.
    public boolean isGameOver()
    {
        return triesLeft <= 0 || treasuresLeft <= 0;
    }

    // handles end of game state.
    public void endGame()
    {
        // reveal all buttons
        for (int row = 0; row < BOARD_SIZE; row++) //
        {
            for (int col = 0; col < BOARD_SIZE; col++) //loop through each column in the current row
            {
                EmptyButton button = buttons[row][col];//get the button located at the current row and column
                if (!button.isEnabled()) //if the button is already disabled, skip the rest of the loop iteration
                {
                    continue;
                }
                if (button instanceof TreasureButton) //If it is a TreasureButton, reveal its treasure content
                {
                    ((TreasureButton)button).reveal();
                } else
                {
                    button.setBackground(Color.PINK);//if it's not a TreasureButton, set its background to gray and display an "O" to indicate a miss
                    button.setText("O");
                }
                button.setEnabled(false);
            }
        }

        String message = treasuresLeft == 0 ? "You won!" : "Game Over!";
        lastMoveLabel.setText("Last move: " + message);
    }

    //can make the game window visible to start the game.
    public void play()
    {
        setVisible(true);
    }

    //canstart the game.
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(() -> new TreasureGame().play());
    }
}
